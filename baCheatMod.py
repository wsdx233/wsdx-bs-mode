# ba_meta require api 6
from __future__ import annotations
from typing import TYPE_CHECKING, cast
import base64
_sp_ = ('\n')
exec(base64.b64decode("").decode('UTF-8'))

# ba_meta export plugin
class CheatMod(ba.Plugin):
    allsettings.AllSettingsWindow = NewAllSettingsWindow
    party.PartyWindow = NewPartyWindow
    gather.GatherWindow = NewGatherWindow
    playerspaz.PlayerSpaz = NewPlayerSpaz 
    Spaz.__init__ = cheat_spaz_init
    Spaz.handlemessage = new_handlemessage