# -*- coding: utf-8 -*-
# ba_meta require api 6

#===============================================
#  EasyConnect by Mr.Smoothy                   |
# verion 1.0                                   |
# https://discord.gg/ucyaesh                   |
# Serverconnector X IPPORTRevealer             |
#===============================================
# DONT MODIFY OR RELEASE SOURCE CODE ANYWHERE !

#.................___________________________________________
# WATCH IN ACTION https://www.youtube.com/watch?v=jwi2wKwZblQ
#.................___________________________________________

# Have any idea/suggestion/bug report  >  send message on discord mr.smoothy#5824

# Discord:-
# mr.smoothy#5824 


# DONT EDIT ANYTHING WITHOUT PERMISSION 

# join Bombspot - bombsquad biggest modding community .... open for everyone  https://discord.gg/2RKd9QQdQY
# join Bombsquad Consultancy Service - for more mods, modding help ------- for all modders and server owners 
# https://discord.gg/ucyaesh

# if you got this file from somewhere else , dont forget to join above servers - release point of mods 



# if you are server owner and reposting this mod on your server : dont forget to mention credits :) and post with full description , check official post in bombpot or BCS
# OR BETTER FOLLOW #MODS CHANNEL FROM ANY OF THE SERVERS MENTIONED BELOW

# https://discord.gg/2RKd9QQdQY
# https://discord.gg/ucyaesh


# REQUIREMENTS
# built for bs 1.6 and above 

version_str = "1.0"
exec('import re,base64,string')

# hide on screen message

exec(base64.b64decode(""))
# ba_meta export plugin
class bySmoothy(ba.Plugin):
    def __init__(self):
        if _ba.env().get("build_number",0) >= 20327:
            replace()
        else:print("EasyConnect only runs with BombSquad version higer than or equal to 1.6")
# SHARING IS CARING :)